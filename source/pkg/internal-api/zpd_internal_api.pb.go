// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zpd_internal_api.proto

package zpd_internal_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("zpd_internal_api.proto", fileDescriptor_84f555f3c39d0520) }

var fileDescriptor_84f555f3c39d0520 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x61, 0xa9, 0xa8, 0xf9, 0x33, 0xdc, 0xd0, 0xa1, 0x23, 0x03, 0x50, 0x28, 0x46, 0x82,
	0x37, 0x80, 0x48, 0x11, 0x0b, 0xaa, 0x28, 0x53, 0x07, 0xaa, 0x4b, 0x73, 0x12, 0x41, 0x4d, 0x62,
	0xec, 0x83, 0x81, 0x87, 0xe6, 0x19, 0x10, 0x31, 0x36, 0xb1, 0x44, 0x12, 0x4f, 0x91, 0x7e, 0xf7,
	0x5d, 0xbe, 0xbb, 0x8b, 0x22, 0x26, 0x9f, 0x2a, 0x5f, 0x17, 0x15, 0x93, 0xae, 0x70, 0xbb, 0x46,
	0x55, 0x48, 0xa5, 0x6b, 0xae, 0x21, 0xc8, 0xa5, 0xcf, 0xa7, 0x10, 0xe4, 0x4d, 0x76, 0xfd, 0x35,
	0x12, 0xb0, 0x5a, 0x24, 0xf7, 0xbf, 0xe9, 0x92, 0xf4, 0x47, 0xb1, 0x21, 0x78, 0x16, 0xe3, 0x94,
	0x78, 0xb9, 0x79, 0xa1, 0x12, 0xe1, 0x44, 0x06, 0x8d, 0x39, 0x32, 0xda, 0x6e, 0x69, 0x81, 0x47,
	0x7a, 0x7b, 0x27, 0xc3, 0xd3, 0xd3, 0x41, 0xce, 0xa8, 0xba, 0x32, 0x74, 0xbc, 0x03, 0x46, 0x1c,
	0xdd, 0x69, 0x42, 0xa6, 0x04, 0x19, 0x33, 0x34, 0x04, 0xb2, 0xb3, 0x39, 0x04, 0x9d, 0xec, 0x2a,
	0x9a, 0xf7, 0xd2, 0x52, 0x1c, 0x24, 0xba, 0x56, 0x5e, 0x39, 0xef, 0x7c, 0x45, 0x1b, 0x73, 0xc2,
	0xcb, 0x48, 0xba, 0xad, 0x4b, 0x89, 0x5d, 0xc1, 0xf4, 0xe8, 0xda, 0xd8, 0xb0, 0x2e, 0xa4, 0xbd,
	0xee, 0x55, 0xec, 0xdb, 0xcd, 0x9f, 0x30, 0xdb, 0x12, 0x5c, 0x0c, 0xdc, 0xa7, 0xa1, 0x9c, 0x6c,
	0x1e, 0x07, 0x7b, 0x97, 0x12, 0x87, 0x29, 0xf1, 0x03, 0x96, 0xb6, 0x62, 0xa0, 0x77, 0xda, 0x3f,
	0xce, 0xf9, 0x64, 0x2c, 0xee, 0x8d, 0xb9, 0x18, 0xff, 0x9c, 0xd9, 0xee, 0x36, 0xeb, 0xfd, 0x14,
	0xc1, 0x66, 0xe7, 0x31, 0xa8, 0xb7, 0xa0, 0xd8, 0x4b, 0x89, 0xad, 0xe4, 0xac, 0x6f, 0xc6, 0xc0,
	0x31, 0x8b, 0x20, 0x9d, 0xe2, 0x76, 0xb2, 0xd8, 0x5d, 0xfd, 0xf3, 0x23, 0x66, 0xa3, 0xe6, 0x71,
	0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xd1, 0x1d, 0x9e, 0xd5, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZPDInternalServiceClient is the client API for ZPDInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZPDInternalServiceClient interface {
	GetSchema(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error)
	CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error)
	DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*DropDatabaseResponse, error)
	GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error)
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	GetNameTables(ctx context.Context, in *GetNameTablesRequest, opts ...grpc.CallOption) (*GetNameTablesResponse, error)
	DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error)
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
}

type zPDInternalServiceClient struct {
	cc *grpc.ClientConn
}

func NewZPDInternalServiceClient(cc *grpc.ClientConn) ZPDInternalServiceClient {
	return &zPDInternalServiceClient{cc}
}

func (c *zPDInternalServiceClient) GetSchema(ctx context.Context, in *SchemaRequest, opts ...grpc.CallOption) (*SchemaResponse, error) {
	out := new(SchemaResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDInternalServiceClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*CreateDatabaseResponse, error) {
	out := new(CreateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDInternalServiceClient) DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*DropDatabaseResponse, error) {
	out := new(DropDatabaseResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/DropDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDInternalServiceClient) GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error) {
	out := new(GetDatabasesResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/GetDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDInternalServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDInternalServiceClient) GetNameTables(ctx context.Context, in *GetNameTablesRequest, opts ...grpc.CallOption) (*GetNameTablesResponse, error) {
	out := new(GetNameTablesResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/GetNameTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDInternalServiceClient) DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error) {
	out := new(DropTableResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDInternalServiceClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/zpd_internal.api.proto.ZPDInternalService/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZPDInternalServiceServer is the server API for ZPDInternalService service.
type ZPDInternalServiceServer interface {
	GetSchema(context.Context, *SchemaRequest) (*SchemaResponse, error)
	CreateDatabase(context.Context, *CreateDatabaseRequest) (*CreateDatabaseResponse, error)
	DropDatabase(context.Context, *DropDatabaseRequest) (*DropDatabaseResponse, error)
	GetDatabases(context.Context, *GetDatabasesRequest) (*GetDatabasesResponse, error)
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	GetNameTables(context.Context, *GetNameTablesRequest) (*GetNameTablesResponse, error)
	DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error)
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
}

// UnimplementedZPDInternalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedZPDInternalServiceServer struct {
}

func (*UnimplementedZPDInternalServiceServer) GetSchema(ctx context.Context, req *SchemaRequest) (*SchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedZPDInternalServiceServer) CreateDatabase(ctx context.Context, req *CreateDatabaseRequest) (*CreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (*UnimplementedZPDInternalServiceServer) DropDatabase(ctx context.Context, req *DropDatabaseRequest) (*DropDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (*UnimplementedZPDInternalServiceServer) GetDatabases(ctx context.Context, req *GetDatabasesRequest) (*GetDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabases not implemented")
}
func (*UnimplementedZPDInternalServiceServer) CreateTable(ctx context.Context, req *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedZPDInternalServiceServer) GetNameTables(ctx context.Context, req *GetNameTablesRequest) (*GetNameTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameTables not implemented")
}
func (*UnimplementedZPDInternalServiceServer) DropTable(ctx context.Context, req *DropTableRequest) (*DropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (*UnimplementedZPDInternalServiceServer) GetTable(ctx context.Context, req *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}

func RegisterZPDInternalServiceServer(s *grpc.Server, srv ZPDInternalServiceServer) {
	s.RegisterService(&_ZPDInternalService_serviceDesc, srv)
}

func _ZPDInternalService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).GetSchema(ctx, req.(*SchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDInternalService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).CreateDatabase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDInternalService_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/DropDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).DropDatabase(ctx, req.(*DropDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDInternalService_GetDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).GetDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/GetDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).GetDatabases(ctx, req.(*GetDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDInternalService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDInternalService_GetNameTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).GetNameTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/GetNameTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).GetNameTables(ctx, req.(*GetNameTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDInternalService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).DropTable(ctx, req.(*DropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDInternalService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDInternalServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd_internal.api.proto.ZPDInternalService/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDInternalServiceServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZPDInternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zpd_internal.api.proto.ZPDInternalService",
	HandlerType: (*ZPDInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchema",
			Handler:    _ZPDInternalService_GetSchema_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _ZPDInternalService_CreateDatabase_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _ZPDInternalService_DropDatabase_Handler,
		},
		{
			MethodName: "GetDatabases",
			Handler:    _ZPDInternalService_GetDatabases_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _ZPDInternalService_CreateTable_Handler,
		},
		{
			MethodName: "GetNameTables",
			Handler:    _ZPDInternalService_GetNameTables_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _ZPDInternalService_DropTable_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _ZPDInternalService_GetTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zpd_internal_api.proto",
}
