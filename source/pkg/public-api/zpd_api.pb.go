// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zpd_api.proto

package zpd_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("zpd_api.proto", fileDescriptor_ebc688b546dbaaa0) }

var fileDescriptor_ebc688b546dbaaa0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xad, 0x2a, 0x48, 0x89,
	0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x02, 0x71, 0xf5, 0xe0, 0x5c, 0x29,
	0x4e, 0x10, 0x17, 0xc2, 0xe4, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0xf0, 0x8c, 0x9e, 0x30,
	0x71, 0x71, 0x45, 0x05, 0xb8, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x99, 0x70, 0xb1,
	0x04, 0x64, 0xe6, 0xa5, 0x0b, 0x89, 0xe8, 0x81, 0x34, 0xa4, 0x24, 0x96, 0x24, 0x42, 0xd4, 0xe9,
	0x81, 0x44, 0xa5, 0x30, 0x45, 0xf3, 0xf3, 0xd2, 0x95, 0x18, 0x84, 0xa2, 0xb9, 0xf8, 0x9d, 0xf3,
	0xf3, 0xf2, 0x52, 0x93, 0x4b, 0x5c, 0x12, 0x4b, 0x12, 0x93, 0x12, 0x8b, 0x53, 0x85, 0x94, 0xd1,
	0x95, 0x42, 0x15, 0x64, 0xe6, 0xe7, 0xb9, 0x38, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x48,
	0x29, 0x82, 0x15, 0x21, 0xbb, 0x47, 0xcf, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x35, 0x28, 0xb5,
	0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x89, 0x41, 0x28, 0x83, 0x4b, 0xdc, 0x39, 0x27, 0xbf, 0x38,
	0x15, 0xc9, 0x00, 0x98, 0x25, 0x1a, 0x18, 0x96, 0xa0, 0x29, 0x24, 0xcd, 0xa6, 0x48, 0x2e, 0x01,
	0xd7, 0x8a, 0xd4, 0xe4, 0xd2, 0x92, 0xd4, 0xe0, 0x92, 0xc4, 0x92, 0xd4, 0xdc, 0xd4, 0xbc, 0x12,
	0x21, 0x05, 0x74, 0x2b, 0xe0, 0x52, 0xa8, 0x46, 0x63, 0x57, 0x01, 0x33, 0xda, 0x89, 0x37, 0x80,
	0x31, 0x0a, 0x11, 0x07, 0x49, 0x6c, 0x60, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xef,
	0x0a, 0x93, 0xb5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZPDServiceClient is the client API for ZPDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZPDServiceClient interface {
	// ping-pong
	Ping(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	//Connection db
	ConnectDatabase(ctx context.Context, in *ConnectionDBRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	//Close connection db
	CloseConnectionDatabase(ctx context.Context, in *CloseConnectionDBRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	//Statement api
	ExecuteStatement(ctx context.Context, in *StatementRequest, opts ...grpc.CallOption) (*StatementResponse, error)
}

type zPDServiceClient struct {
	cc *grpc.ClientConn
}

func NewZPDServiceClient(cc *grpc.ClientConn) ZPDServiceClient {
	return &zPDServiceClient{cc}
}

func (c *zPDServiceClient) Ping(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/zpd.api.proto.ZPDService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDServiceClient) ConnectDatabase(ctx context.Context, in *ConnectionDBRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/zpd.api.proto.ZPDService/ConnectDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDServiceClient) CloseConnectionDatabase(ctx context.Context, in *CloseConnectionDBRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/zpd.api.proto.ZPDService/CloseConnectionDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zPDServiceClient) ExecuteStatement(ctx context.Context, in *StatementRequest, opts ...grpc.CallOption) (*StatementResponse, error) {
	out := new(StatementResponse)
	err := c.cc.Invoke(ctx, "/zpd.api.proto.ZPDService/ExecuteStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZPDServiceServer is the server API for ZPDService service.
type ZPDServiceServer interface {
	// ping-pong
	Ping(context.Context, *Ping) (*Pong, error)
	//Connection db
	ConnectDatabase(context.Context, *ConnectionDBRequest) (*MessageResponse, error)
	//Close connection db
	CloseConnectionDatabase(context.Context, *CloseConnectionDBRequest) (*MessageResponse, error)
	//Statement api
	ExecuteStatement(context.Context, *StatementRequest) (*StatementResponse, error)
}

// UnimplementedZPDServiceServer can be embedded to have forward compatible implementations.
type UnimplementedZPDServiceServer struct {
}

func (*UnimplementedZPDServiceServer) Ping(ctx context.Context, req *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedZPDServiceServer) ConnectDatabase(ctx context.Context, req *ConnectionDBRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectDatabase not implemented")
}
func (*UnimplementedZPDServiceServer) CloseConnectionDatabase(ctx context.Context, req *CloseConnectionDBRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConnectionDatabase not implemented")
}
func (*UnimplementedZPDServiceServer) ExecuteStatement(ctx context.Context, req *StatementRequest) (*StatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStatement not implemented")
}

func RegisterZPDServiceServer(s *grpc.Server, srv ZPDServiceServer) {
	s.RegisterService(&_ZPDService_serviceDesc, srv)
}

func _ZPDService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd.api.proto.ZPDService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDServiceServer).Ping(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDService_ConnectDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDServiceServer).ConnectDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd.api.proto.ZPDService/ConnectDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDServiceServer).ConnectDatabase(ctx, req.(*ConnectionDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDService_CloseConnectionDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConnectionDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDServiceServer).CloseConnectionDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd.api.proto.ZPDService/CloseConnectionDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDServiceServer).CloseConnectionDatabase(ctx, req.(*CloseConnectionDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZPDService_ExecuteStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZPDServiceServer).ExecuteStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zpd.api.proto.ZPDService/ExecuteStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZPDServiceServer).ExecuteStatement(ctx, req.(*StatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZPDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zpd.api.proto.ZPDService",
	HandlerType: (*ZPDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ZPDService_Ping_Handler,
		},
		{
			MethodName: "ConnectDatabase",
			Handler:    _ZPDService_ConnectDatabase_Handler,
		},
		{
			MethodName: "CloseConnectionDatabase",
			Handler:    _ZPDService_CloseConnectionDatabase_Handler,
		},
		{
			MethodName: "ExecuteStatement",
			Handler:    _ZPDService_ExecuteStatement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zpd_api.proto",
}
